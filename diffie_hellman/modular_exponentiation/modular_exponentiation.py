""" Solve a^b % n """
def exponential_modulus(a, b, n):
    """ previously when passing b to recursive function, used b/2 this will make the number no longer big_int but similar to float which
    makes the result incorrect. But when use floor the exact value is preserved.   """

    if b == 1: # the end of recursion
        return (a % n)
    elif b % 2 == 0: # divide even exponent in half
        half = exponential_modulus(a, b//2, n)
        return ((half * half) % n)
    else: # for odd exponent, minus 1 then it will become odd or 1
        half_odd = exponential_modulus(a, (b-1)//2, n)
        return ((a * half_odd * half_odd) % n)


# res = exponential_modulus(2, 35236, 1234)
# print(res)
# base = 2
# k = 10
# p = 1000
base = 98730819128552012141241213121231231121231231213131312312311014736088097732614545432320822107108978409756569223088340694496488528386680940312630524870509573864596988683988397282969818502346561622385318850857564689511911281398294930663536909262646442914356724220812950363186403175796883057217881745278116921231075006187327040445023356125339609999121
k = 11014736088097732614545432320822107108978409756569223088340694496488528386680940312630524870509573864596988683988397282969818502346561622385318850857564689511911281398294930663536909262646442914356724220812950363186403175796883057217881745278116921231075006187327040445023356125339609999121

p = 43082051866405784268948008360239663371476383135695473540552891195307856350251150004363160861540864492690236763621355192274027092576551112340323465734825985622409182429611461053257718176197766147966093597607140010120892130855358598001143531843921797726275980046817650188458876441923529364987308191285520121412412131212312311212312312131313123123
res = exponential_modulus(base, k, p)
print(res)

""" 
from random import getrandbits
k = getrandbits(1024)
# print(len(str(k)))
bin_k = bin(k).replace("0b", "")
print(type(bin_k))
print(len(str(k)))
base = 98730819128552012141241213121231231121231231213131312312311014736088097732614545432320822107108978409756569223088340694496488528386680940312630524870509573864596988683988397282969818502346561622385318850857564689511911281398294930663536909262646442914356724220812950363186403175796883057217881745278116921231075006187327040445023356125339609999121
p = 43082051866405784268948008360239663371476383135695473540552891195307856350251150004363160861540864492690236763621355192274027092576551112340323465734825985622409182429611461053257718176197766147966093597607140010120892130855358598001143531843921797726275980046817650188458876441923529364987308191285520121412412131212312311212312312131313123123
res = exponential_modulus(base, k, p)
print(res) """